2018-01-15 新建Asp.net core 2.0 MVC 项目(Web)
	1、项目发布后运行
		1.1 开始运行 cmd ,cd 进入到发布后的目录（必需要进入到站点目录否则所有静态资源路径会不对）；
		1.2 通过dotnet 运行网站默认端口为 5000， 命令：dotnet Web.dll  
		1.3 配置站点发布后 Views 文件不被打包,在项目上点右键“编辑 Web.csproj”
			在PropertyGroup 节点增加 <MvcRazorCompileOnPublish>false</MvcRazorCompileOnPublish>
			缺点每次发布需先关闭整个 Cmd 窗口，否则会有缓存文件无法发布;
		1.4 配置站点绑定指定端口或域名，打开 Program.cs

			 public static IWebHost BuildWebHost(string[] args) =>
                            WebHost.CreateDefaultBuilder(args)
                            .UseUrls("http://localhost:7002;http://*:7003")		//指定端口
                            .UseKestrel()   //应用为服务器使用的web主机。
                            .UseContentRoot(Directory.GetCurrentDirectory()) 
                            .UseIISIntegration()
                            .UseStartup<Startup>()
                            .Build();

	
2018-06-25 Microsoft.AspNetCore.All
	该库目前 Web 是 2.0 版本，如果更新到 2.1 会抛异常找不到库，而 2.1 是 App 的库；
 	记的更新 VS 2017 工具，否则会出现一些异想不到的问题。
				

2018-06-26 对Mvc 中 View 打包和不打包的配置
        编辑项目 .csproj 文件，增加下面语句
	<PropertyGroup>
    		<TargetFramework>netcoreapp2.1</TargetFramework>
    		<!--Views 是否进行打包-->
    		<MvcRazorCompileOnPublish>false</MvcRazorCompileOnPublish>
  	</PropertyGroup>

2018-07-02 数据库连接问题
	数据库连接字符串修改配置文件： appsettings.json
	增加多个库连接字符串
	"ConnectionStrings": {
    		"SqliteContext": "Data Source=bizBd.db;",
    		"NpgsSqlContext": "User ID=dev;Password=123456;Host=10.0.1.112;Port=5432;Database=test;Pooling=true;",
    		"SqlConnection": "server=.;Database=Test;uid=sa;pwd=123456"
  	},


	方法一：构造函数注入方式
		1、程序入口文件修改 Startup.cs
			ConfigureServices 方法中 注册数据库连接上下文：

			//获取数据库连接字符串
            		var npgsSqlConnectionString = Configuration.GetConnectionString("NpgsSqlContext");
            		//添加数据上下文
            		services.AddDbContext<NpgsSqlContext>(options =>
                		options.UseNpgsql(npgsSqlConnectionString)
            		);

            		//获取数据库连接字符串
            		var sqLiteConnectionString = Configuration.GetConnectionString("SqliteContext");
            			services.AddDbContext<SqliteContext>(options =>
                		options.UseSqlite(sqLiteConnectionString)
           	 	);


		2、控制器中构造函数注入
			public class HomeController : Controller
    			{
        			NpgsSqlContext _npgsSqlContext;
        			SqliteContext _sqliteContext;
        			public HomeController(NpgsSqlContext npgsSqlContext, SqliteContext sqliteContext)
        			{
           			 	this._npgsSqlContext = npgsSqlContext;
            				this._sqliteContext = sqliteContext;
        			}

        			public IActionResult Index()
        			{	
            				var npgsData = _npgsSqlContext.User.Where(item => true);
					var sqLiteData = _sqliteContext.ManageUser.Where(item => true);
				}
			}
	方法二：通过Http 请求上下文获取Service
		1、注册数据库连接上下文 见（方法一：1）
		2、获取 Http 请求上下文中数据库连接
			var npgsDb = this.HttpContext.RequestServices.GetService<NpgsSqlContext>();
			var sqliteDb = this.HttpContext.RequestServices.GetService<SqliteContext>();
			var npgsData = npgsDb.User.Where(item => true);	//读取 npgs 数据
			var sqLiteData = sqliteDb.ManageUser.Where(item => true);	//读取 SqLite 数据
	
	方法三：通过 new 实例化进行连接 (不推荐)
		1、在构造函数，增加一个 带 string 参数的构造函数
			传入 数据库连接字符串，在获取  OnConfiguring 进行注册
			private string _context;
        		public SqlContext(string context)
        		{
            			this._context = context;
        		}
			protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        		{
            			optionsBuilder.UseNpgsql(this._context);
        		}
			使用方法：
				var db = new SqlContext("User ID=dev;Password=123456;Host=10.0.1.112;Port=5432;Database=test;Pooling=true;");
				var npgsData = db.User.Where(item => true);	


